{
  "address": "0x3B5d34b69008843F046D4aCEc113E5c8bf49f3E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILoot",
          "name": "loot",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticLoot",
          "name": "syntheticLoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "getTokenDataForIds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct LootForEveryone.TokenDataToClaim[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "getTokenDataOfOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            }
          ],
          "internalType": "struct LootForEveryone.TokenData[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLootPicked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "pickLoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transmute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transmuteBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x96c48d3c83640b9698218801578fa2adabfd7806d420dde47b80e94a71dfb2a1",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x3B5d34b69008843F046D4aCEc113E5c8bf49f3E0",
    "transactionIndex": 19,
    "gasUsed": "2218635",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1dddd74f8f48ea07dc73f54193d3a8c0f87d95bf5314e8bc87458f0a0bfb0b56",
    "transactionHash": "0x96c48d3c83640b9698218801578fa2adabfd7806d420dde47b80e94a71dfb2a1",
    "logs": [],
    "blockNumber": 9232548,
    "cumulativeGasUsed": "4750774",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6c4dcCb5819539265969d07Cb5869a474643E1ff",
    "0x1cFA90E3894AD3cA625cc75340dcc67519Df9261"
  ],
  "solcInputHash": "1cf5d125ef08966c3f3ef9ae4c70f80a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILoot\",\"name\":\"loot\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticLoot\",\"name\":\"syntheticLoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getTokenDataForIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct LootForEveryone.TokenDataToClaim[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getTokenDataOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct LootForEveryone.TokenData[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLootPicked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"pickLoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transmute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transmuteBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"balance\":\"The number of tokens owned by the address.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface.\"},\"returns\":{\"_0\":\"Whether the interface is supported.\"}},\"tokenByIndex(uint256)\":{\"details\":\"Throws if `index` >= `totalSupply()`.\",\"params\":{\"index\":\"A counter less than `totalSupply()`\"},\"returns\":{\"_0\":\"The token identifier for the `_index`th NFT,  (sort order not specified)\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Throws if `index` >= `balanceOf(owner)` or if  `owner` is the zero address, representing invalid NFTs.\",\"params\":{\"index\":\"A counter less than `balanceOf(owner)`\",\"owner\":\"An address where we are interested in NFTs owned by them\"},\"returns\":{\"_0\":\"The token identifier for the `index`th NFT assigned to `owner`,   (sort order not specified)\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getTokenDataForIds(uint256[])\":{\"notice\":\"get all info in the minimum calls\"},\"getTokenDataOfOwner(address,uint256,uint256)\":{\"notice\":\"get all info in the minimum calls\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isLootPicked(uint256)\":{\"notice\":\"return true if the loot has been picked up or been transfered at least once\"},\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"pickLoot(address,bytes)\":{\"notice\":\"utility function to claim a token when you know the private key of an address, go hunt for your loot!\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface. 0x01ffc9a7 is ERC165. 0x80ac58cd is ERC721 0x5b5e139f is for ERC721 metadata 0x780e9d63 is for ERC721 enumerable\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"},\"tokenByIndex(uint256)\":{\"notice\":\"Enumerate valid NFTs\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Enumerate NFTs assigned to an owner\"},\"totalSupply()\":{\"notice\":\"Count NFTs tracked by this contract\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"},\"transmute(uint256,address)\":{\"notice\":\"lock your original but limited loot so that you get a LootForEveryone like everyone else\"},\"transmuteBack(uint256,address)\":{\"notice\":\"unlock your original loot back\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/LootForEveryone.sol\":\"LootForEveryone\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x94c4719c16ffb96dd3cdc68f6fbf78105153018adbf382241821e8188e6a4bd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"src/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nabstract contract ERC721Base is IERC165, IERC721 {\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => EnumerableSet.UintSet) internal _holderTokens;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @notice Count NFTs tracked by this contract\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\n    ///  them has an assigned and queryable owner not equal to the zero address\\n    function totalSupply() external pure returns (uint256) {\\n        return 2**160 - 1; // do not count token with id zero whose owner would otherwise be the zero address\\n    }\\n\\n    /// @notice Enumerate valid NFTs\\n    /// @dev Throws if `index` >= `totalSupply()`.\\n    /// @param index A counter less than `totalSupply()`\\n    /// @return The token identifier for the `_index`th NFT,\\n    ///  (sort order not specified)\\n    function tokenByIndex(uint256 index) external pure returns (uint256) {\\n        require(index < 2**160 - 1, \\\"NONEXISTENT_TOKEN\\\");\\n        return index + 1; // skip zero as we do not count token with id zero whose owner would otherwise be the zero address\\n    }\\n\\n    /// @notice Enumerate NFTs assigned to an owner\\n    /// @dev Throws if `index` >= `balanceOf(owner)` or if\\n    ///  `owner` is the zero address, representing invalid NFTs.\\n    /// @param owner An address where we are interested in NFTs owned by them\\n    /// @param index A counter less than `balanceOf(owner)`\\n    /// @return The token identifier for the `index`th NFT assigned to `owner`,\\n    ///   (sort order not specified)\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        (, bool registered) = _ownerOfAndRegistered(uint256(owner));\\n        if (!registered) {\\n            if (index == 0) {\\n                return uint256(owner);\\n            }\\n            index--;\\n        }\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        (address owner, bool registered) = _ownerOfAndRegistered(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"UNAUTHORIZED_APPROVAL\\\");\\n        _approveFor(owner, operator, id, registered);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        (address owner, bool operatorEnabled, bool registered) = _ownerRegisteredAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        if (msg.sender != from) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || (operatorEnabled && _operators[id] == msg.sender),\\n                \\\"UNAUTHORIZED_TRANSFER\\\"\\n            );\\n        }\\n        _transferFrom(from, to, id, registered);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return balance The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256 balance) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        balance = _holderTokens[owner].length();\\n        (, bool registered) = _ownerOfAndRegistered(uint256(owner));\\n        if (!registered) {\\n            // owned token was never registered\\n            balance++;\\n        }\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        (address owner, bool operatorEnabled, bool registered) = _ownerRegisteredAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        if (msg.sender != from) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || (operatorEnabled && _operators[id] == msg.sender),\\n                \\\"UNAUTHORIZED_TRANSFER\\\"\\n            );\\n        }\\n        _safeTransferFrom(from, to, id, registered, data);\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC165.\\n    /// 0x80ac58cd is ERC721\\n    /// 0x5b5e139f is for ERC721 metadata\\n    /// 0x780e9d63 is for ERC721 enumerable\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f || id == 0x780e9d63;\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bool alreadyRegistered,\\n        bytes memory data\\n    ) internal {\\n        _transferFrom(from, to, id, alreadyRegistered);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(msg.sender, from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bool alreadyRegistered\\n    ) internal {\\n        if (alreadyRegistered) {\\n            _holderTokens[from].remove(id);\\n        }\\n        _holderTokens[to].add(id);\\n        _owners[id] = uint256(to);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approve.\\n    function _approveFor(\\n        address owner,\\n        address operator,\\n        uint256 id,\\n        bool alreadyRegistered\\n    ) internal {\\n        if (operator == address(0)) {\\n            _owners[id] = alreadyRegistered ? uint256(owner) : 0;\\n        } else {\\n            _owners[id] = OPERATOR_FLAG | (alreadyRegistered ? uint256(owner) : 0);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param id The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, id, _data);\\n        return (retval == ERC721_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view returns (address owner) {\\n        owner = address(_owners[id]);\\n        if (owner == address(0) && id < 2**160) {\\n            owner = address(id);\\n        }\\n    }\\n\\n    /// @dev Get the ownerand registered status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return registered whethe the token has been registered with an owner\\n    function _ownerOfAndRegistered(uint256 id) internal view returns (address owner, bool registered) {\\n        owner = address(_owners[id]);\\n        if (owner == address(0) && id < 2**160) {\\n            owner = address(id);\\n        } else {\\n            registered = true;\\n        }\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[id];\\n        owner = address(data);\\n        if (owner == address(0) && id < 2**160) {\\n            owner = address(id);\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Get the owner, operatorEnabled and registered status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    /// @return registered whethe the token has been registered with an owner\\n    function _ownerRegisteredAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        returns (\\n            address owner,\\n            bool operatorEnabled,\\n            bool registered\\n        )\\n    {\\n        uint256 data = _owners[id];\\n        owner = address(data);\\n        if (owner == address(0) && id < 2**160) {\\n            owner = address(id);\\n        } else {\\n            registered = true;\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n}\\n\",\"keccak256\":\"0xd9d64ace1400b0fcb21de78cde6aa056abfef0f1b75626d298a05bac2c190265\",\"license\":\"AGPL-1.0\"},\"src/LootForEveryone.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC721Base.sol\\\";\\nimport \\\"./interfaces/ISyntheticLoot.sol\\\";\\nimport \\\"./interfaces/ILoot.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\n\\ncontract LootForEveryone is ERC721Base {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using ECDSA for bytes32;\\n\\n    struct TokenData {\\n        uint256 id;\\n        string tokenURI;\\n    }\\n\\n    struct TokenDataToClaim {\\n        uint256 id;\\n        string tokenURI;\\n        bool claimed;\\n    }\\n\\n    ILoot private immutable _loot;\\n    ISyntheticLoot private immutable _syntheticLoot;\\n\\n    constructor(ILoot loot, ISyntheticLoot syntheticLoot) {\\n        _loot = loot;\\n        _syntheticLoot = syntheticLoot;\\n    }\\n\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external pure returns (string memory) {\\n        return \\\"Loot For Everyone\\\";\\n    }\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LOOT\\\";\\n    }\\n\\n    function tokenURI(uint256 id) external view returns (string memory) {\\n        return _tokenURI(id);\\n    }\\n\\n    ///@notice get all info in the minimum calls\\n    function getTokenDataOfOwner(\\n        address owner,\\n        uint256 start,\\n        uint256 num\\n    ) external view returns (TokenData[] memory tokens) {\\n        require(start < 2**160 && num < 2**160, \\\"INVALID_RANGE\\\");\\n        EnumerableSet.UintSet storage allTokens = _holderTokens[owner];\\n        uint256 balance = allTokens.length();\\n        (, bool registered) = _ownerOfAndRegistered(uint256(owner));\\n        if (!registered) {\\n            // owned token was never registered, add balance\\n            balance++;\\n        }\\n        require(balance >= start + num, \\\"TOO_MANY_TOKEN_REQUESTED\\\");\\n        tokens = new TokenData[](num);\\n        uint256 i = 0;\\n        uint256 offset = 0;\\n        if (start == 0 && !registered) {\\n            // if start at zero consider unregistered token\\n            tokens[0] = TokenData(uint256(owner), _tokenURI(uint256(owner)));\\n            offset = 1;\\n            i = 1;\\n        }\\n        while (i < num) {\\n            uint256 id = allTokens.at(start + i - offset);\\n            tokens[i] = TokenData(id, _tokenURI(id));\\n            i++;\\n        }\\n    }\\n\\n    ///@notice get all info in the minimum calls\\n    function getTokenDataForIds(uint256[] memory ids) external view returns (TokenDataToClaim[] memory tokens) {\\n        tokens = new TokenDataToClaim[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            (, bool registered) = _ownerOfAndRegistered(id);\\n            tokens[i] = TokenDataToClaim(id, _tokenURI(id), registered);\\n        }\\n    }\\n\\n    /// @notice utility function to claim a token when you know the private key of an address, go hunt for your loot!\\n    function pickLoot(address to, bytes memory signature) external {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        bytes32 hashedData = keccak256(abi.encodePacked(\\\"LootForEveryone\\\", to));\\n        address signer = hashedData.toEthSignedMessageHash().recover(signature);\\n        (, bool registered) = _ownerOfAndRegistered(uint256(signer));\\n        require(!registered, \\\"ALREADY_CALIMED\\\");\\n        _safeTransferFrom(signer, to, uint256(signer), false, \\\"\\\");\\n    }\\n\\n    ///@notice return true if the loot has been picked up or been transfered at least once\\n    function isLootPicked(uint256 id) external view returns(bool) {\\n        (address owner, bool registered) = _ownerOfAndRegistered(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        return registered;\\n    }\\n\\n    /// @notice lock your original but limited loot so that you get a LootForEveryone like everyone else\\n    function transmute(uint256 id, address to) external {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        _loot.transferFrom(msg.sender, address(this), id);\\n        (address owner, bool registered) = _ownerOfAndRegistered(id);\\n        if (registered) {\\n            require(owner == address(this), \\\"ALREADY_CLAIMED\\\"); // unlikely to happen, would need to find the private key for its adresss (< 8001)\\n            _safeTransferFrom(address(this), to, id, false, \\\"\\\");\\n        } else {\\n            _safeTransferFrom(address(id), to, id, false, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice unlock your original loot back\\n    function transmuteBack(uint256 id, address to) external {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        (address owner, bool registered) = _ownerOfAndRegistered(id);\\n        require(msg.sender == owner, \\\"NOT_OWNER\\\");\\n        _transferFrom(owner, address(this), id, registered);\\n        _loot.transferFrom(address(this), to, id);\\n    }\\n\\n    // -------------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // -------------------------------------------------------------------------------------------------\\n\\n    function _tokenURI(uint256 id) internal view returns (string memory) {\\n        require(uint256(address(id)) == id, \\\"NONEXISTENT_TOKEN\\\");\\n        if (id < 8001) {\\n            return _loot.tokenURI(id);\\n        }\\n        return _syntheticLoot.tokenURI(address(id));\\n    }\\n}\\n\",\"keccak256\":\"0x4d960159a090ef977af5d9837bd3d24918b59f0b1cac56b254b4d95dc0ff4543\",\"license\":\"AGPL-1.0\"},\"src/interfaces/ILoot.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface ILoot is IERC721Metadata{\\n\\n}\\n\",\"keccak256\":\"0x5ef3d79f6ed4263ce0e800f7e4327f667d1f06f129230b534553e9d8519cc2ce\",\"license\":\"Unlicense\"},\"src/interfaces/ISyntheticLoot.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\ninterface ISyntheticLoot {\\n\\n    function weaponComponents(address walletAddress) external view returns (uint256[5] memory);\\n\\n    function chestComponents(address walletAddress) external view returns (uint256[5] memory);\\n\\n    function headComponents(address walletAddress) external view returns (uint256[5] memory);\\n\\n    function waistComponents(address walletAddress) external view returns (uint256[5] memory);\\n\\n    function footComponents(address walletAddress) external view returns (uint256[5] memory);\\n\\n    function handComponents(address walletAddress) external view returns (uint256[5] memory);\\n\\n    function neckComponents(address walletAddress) external view returns (uint256[5] memory);\\n\\n    function ringComponents(address walletAddress) external view returns (uint256[5] memory);\\n\\n    function getWeapon(address walletAddress) external view returns (string memory);\\n\\n    function getChest(address walletAddress) external view returns (string memory);\\n\\n    function getHead(address walletAddress) external view returns (string memory);\\n\\n    function getWaist(address walletAddress) external view returns (string memory);\\n\\n    function getFoot(address walletAddress) external view returns (string memory);\\n\\n    function getHand(address walletAddress) external view returns (string memory);\\n\\n    function getNeck(address walletAddress) external view returns (string memory);\\n\\n    function getRing(address walletAddress) external view returns (string memory);\\n\\n    function tokenURI(address walletAddress) external view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0x515691110a99c50261504637eb6b798c48ee99e8cd59cf76bafe76dbe3f654dd\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80634f6ccce7116100d857806395d89b411161008c578063ba7d53b111610066578063ba7d53b114610328578063c87b56dd1461033b578063e985e9c51461034e57610182565b806395d89b41146102fa578063a22cb46514610302578063b88d4fde1461031557610182565b806365986e64116100bd57806365986e64146102c157806370a08231146102d45780638722781c146102e757610182565b80634f6ccce71461029b5780636352211e146102ae57610182565b806318160ddd1161013a5780633a5110db116101145780633a5110db1461024857806342842e0e146102685780634f550a191461027b57610182565b806318160ddd1461020d57806323b872dd146102225780632f745c591461023557610182565b8063081812fc1161016b578063081812fc146101c5578063095ea7b3146101e557806309d5bb88146101fa57610182565b806301ffc9a71461018757806306fdde03146101b0575b600080fd5b61019a6101953660046121e9565b610361565b6040516101a7919061246a565b60405180910390f35b6101b8610494565b6040516101a79190612475565b6101d86101d3366004612293565b6104cb565b6040516101a7919061234f565b6101f86101f33660046120ed565b61055e565b005b6101f86102083660046120a1565b61065b565b610215610757565b6040516101a79190612634565b6101f8610230366004611fc6565b610762565b6102156102433660046120ed565b6109aa565b61025b610256366004612116565b610a6d565b6040516101a79190612407565b6101f8610276366004611fc6565b610c29565b61028e610289366004612148565b610c49565b6040516101a79190612387565b6102156102a9366004612293565b610d1e565b6101d86102bc366004612293565b610d76565b6101f86102cf3660046122ab565b610dde565b6102156102e2366004611f7a565b610f45565b6101f86102f53660046122ab565b610fea565b6101b861111f565b6101f8610310366004612067565b611156565b6101f8610323366004612001565b611165565b61019a610336366004612293565b6113af565b6101b8610349366004612293565b6113ef565b61019a61035c366004611f94565b6113fa565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103f457507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061044057507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061048c57507f780e9d63000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b60408051808201909152601181527f4c6f6f7420466f722045766572796f6e65000000000000000000000000000000602082015290565b60008060006104d984611428565b90925090506001600160a01b03821661052d576040805162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015290519081900360640190fd5b8015610553575050506000818152600360205260409020546001600160a01b031661048f565b60009250505061048f565b60008061056a8361146d565b90925090506001600160a01b0382166105be576040805162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015290519081900360640190fd5b6001600160a01b0382163314806105f857506001600160a01b038216600090815260026020908152604080832033845290915290205460ff165b610649576040805162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015290519081900360640190fd5b610655828585846114ad565b50505050565b6001600160a01b03821661068a5760405162461bcd60e51b815260040161068190612521565b60405180910390fd5b6001600160a01b0382163014156106b35760405162461bcd60e51b815260040161068190612558565b6000826040516020016106c691906122f9565b60405160208183030381529060405280519060200120905060006106f3836106ed84611596565b906115e7565b90506000610709826001600160a01b031661146d565b915050801561072a5760405162461bcd60e51b81526004016106819061258f565b6107508286846001600160a01b0316600060405180602001604052806000815250611667565b5050505050565b6001600160a01b0390565b6000806000610770846116e8565b919450925090506001600160a01b0383166107c6576040805162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015290519081900360640190fd5b856001600160a01b0316836001600160a01b03161461082c576040805162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038516610887576040805162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0385163014156108e5576040805162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015290519081900360640190fd5b336001600160a01b03871614610996576001600160a01b038616600090815260026020908152604080832033845290915290205460ff1680610945575081801561094557506000848152600360205260409020546001600160a01b031633145b610996576040805162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015290519081900360640190fd5b6109a286868684611739565b505050505050565b60006001600160a01b038316610a07576040805162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015290519081900360640190fd5b6000610a1b846001600160a01b031661146d565b91505080610a415782610a395750506001600160a01b038216610a67565b600019909201915b6001600160a01b0384166000908152600160205260409020610a6390846117d6565b9150505b92915050565b6060600160a01b83108015610a855750600160a01b82105b610aa15760405162461bcd60e51b8152600401610681906124ea565b6001600160a01b038416600090815260016020526040812090610ac3826117e2565b90506000610ad9876001600160a01b031661146d565b91505080610ae8576001909101905b848601821015610b0a5760405162461bcd60e51b815260040161068190612488565b8467ffffffffffffffff81118015610b2157600080fd5b50604051908082528060200260200182016040528015610b5b57816020015b610b48611ed5565b815260200190600190039081610b405790505b50935060008087158015610b6d575082155b15610bc25760405180604001604052808a6001600160a01b03168152602001610b9e8b6001600160a01b03166117ed565b81525086600081518110610bae57fe5b602002602001018190525060019050600191505b86821015610c1d576000610bdb868a85018490036117d6565b90506040518060400160405280828152602001610bf7836117ed565b815250878481518110610c0657fe5b602090810291909101015250600190910190610bc2565b50505050509392505050565b610c4483838360405180602001604052806000815250611165565b505050565b6060815167ffffffffffffffff81118015610c6357600080fd5b50604051908082528060200260200182016040528015610c9d57816020015b610c8a611eef565b815260200190600190039081610c825790505b50905060005b8251811015610d18576000838281518110610cba57fe5b602002602001015190506000610ccf8261146d565b9150506040518060600160405280838152602001610cec846117ed565b8152602001821515815250848481518110610d0357fe5b60209081029190910101525050600101610ca3565b50919050565b60006001600160a01b038210610d6f576040805162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015290519081900360640190fd5b5060010190565b6000610d818261199a565b90506001600160a01b03811661048f576040805162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610e045760405162461bcd60e51b815260040161068190612521565b6001600160a01b038116301415610e2d5760405162461bcd60e51b815260040161068190612558565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90610e9690339030908790600401612363565b600060405180830381600087803b158015610eb057600080fd5b505af1158015610ec4573d6000803e3d6000fd5b50505050600080610ed48461146d565b915091508015610f28576001600160a01b0382163014610f065760405162461bcd60e51b8152600401610681906125fd565b610f23308486600060405180602001604052806000815250611667565b610655565b610655848486600060405180602001604052806000815250611667565b60006001600160a01b038216610fa2576040805162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600160205260409020610fc3906117e2565b90506000610fd9836001600160a01b031661146d565b91505080610d185750600101919050565b6001600160a01b0381166110105760405162461bcd60e51b815260040161068190612521565b6001600160a01b0381163014156110395760405162461bcd60e51b815260040161068190612558565b6000806110458461146d565b9092509050336001600160a01b038316146110725760405162461bcd60e51b8152600401610681906125c6565b61107e82308684611739565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906110e790309087908990600401612363565b600060405180830381600087803b15801561110157600080fd5b505af1158015611115573d6000803e3d6000fd5b5050505050505050565b60408051808201909152600481527f4c4f4f5400000000000000000000000000000000000000000000000000000000602082015290565b6111613383836119cc565b5050565b6000806000611173856116e8565b919450925090506001600160a01b0383166111c9576040805162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604482015290519081900360640190fd5b866001600160a01b0316836001600160a01b03161461122f576040805162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03861661128a576040805162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0386163014156112e8576040805162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015290519081900360640190fd5b336001600160a01b03881614611399576001600160a01b038716600090815260026020908152604080832033845290915290205460ff1680611348575081801561134857506000858152600360205260409020546001600160a01b031633145b611399576040805162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015290519081900360640190fd5b6113a68787878488611667565b50505050505050565b60008060006113bd8461146d565b90925090506001600160a01b0382166113e85760405162461bcd60e51b8152600401610681906124bf565b9392505050565b606061048c826117ed565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b60008181526020819052604081205490816001600160a01b0381161580156114535750600160a01b84105b1561145c578392505b600160ff1b80821614915050915091565b600081815260208190526040812054906001600160a01b0382161580156114975750600160a01b83105b156114a4578291506114a8565b5060015b915091565b6001600160a01b0383166114e657806114c75760006114d2565b836001600160a01b03165b60008381526020819052604090205561154f565b806114f25760006114fd565b836001600160a01b03165b600083815260208181526040808320600160ff1b94909417909355600390522080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000815160411461163f576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a61165d86828585611a58565b9695505050505050565b61167385858585611739565b611685846001600160a01b0316611bd6565b15610750576116973386868685611bdc565b610750576040805162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015290519081900360640190fd5b6000818152602081905260408120549080826001600160a01b0381161580156117145750600160a01b85105b1561172157849350611726565b600191505b600160ff1b808216149250509193909250565b8015611763576001600160a01b03841660009081526001602052604090206117619083611d2d565b505b6001600160a01b03831660009081526001602052604090206117859083611d39565b506000828152602081905260408082206001600160a01b03808716918290559151859391928816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b60006113e88383611d45565b600061048c82611da9565b606081826001600160a01b0316146118175760405162461bcd60e51b8152600401610681906124bf565b611f418210156118e1576040517fc87b56dd0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c87b56dd90611886908590600401612634565b60006040518083038186803b15801561189e57600080fd5b505afa1580156118b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118da9190810190612229565b905061048f565b6040517f93702f330000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906393702f339061194690859060040161234f565b60006040518083038186803b15801561195e57600080fd5b505afa158015611972573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048c9190810190612229565b6000818152602081905260409020546001600160a01b0381161580156119c35750600160a01b82105b1561048f575090565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611ab95760405162461bcd60e51b81526004018080602001828103825260228152602001806126d26022913960400191505060405180910390fd5b8360ff16601b1480611ace57508360ff16601c145b611b095760405162461bcd60e51b81526004018080602001828103825260228152602001806126f46022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611b65573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611bcd576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b3b151590565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c62578181015183820152602001611c4a565b50505050905090810190601f168015611c8f5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611cb157600080fd5b505af1158015611cc5573d6000803e3d6000fd5b505050506040513d6020811015611cdb57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b60006113e88383611dad565b60006113e88383611e73565b81546000908210611d875760405162461bcd60e51b81526004018080602001828103825260228152602001806126b06022913960400191505060405180910390fd5b826000018281548110611d9657fe5b9060005260206000200154905092915050565b5490565b60008181526001830160205260408120548015611e695783546000198083019190810190600090879083908110611de057fe5b9060005260206000200154905080876000018481548110611dfd57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611e2d57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610a67565b6000915050610a67565b6000611e7f8383611ebd565b611eb557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a67565b506000610a67565b60009081526001919091016020526040902054151590565b604051806040016040528060008152602001606081525090565b604051806060016040528060008152602001606081526020016000151581525090565b80356001600160a01b038116811461048f57600080fd5b600082601f830112611f39578081fd5b8135611f4c611f4782612661565b61263d565b818152846020838601011115611f60578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611f8b578081fd5b6113e882611f12565b60008060408385031215611fa6578081fd5b611faf83611f12565b9150611fbd60208401611f12565b90509250929050565b600080600060608486031215611fda578081fd5b611fe384611f12565b9250611ff160208501611f12565b9150604084013590509250925092565b60008060008060808587031215612016578081fd5b61201f85611f12565b935061202d60208601611f12565b925060408501359150606085013567ffffffffffffffff81111561204f578182fd5b61205b87828801611f29565b91505092959194509250565b60008060408385031215612079578182fd5b61208283611f12565b915060208301358015158114612096578182fd5b809150509250929050565b600080604083850312156120b3578182fd5b6120bc83611f12565b9150602083013567ffffffffffffffff8111156120d7578182fd5b6120e385828601611f29565b9150509250929050565b600080604083850312156120ff578182fd5b61210883611f12565b946020939093013593505050565b60008060006060848603121561212a578283fd5b61213384611f12565b95602085013595506040909401359392505050565b6000602080838503121561215a578182fd5b823567ffffffffffffffff80821115612171578384fd5b818501915085601f830112612184578384fd5b81358181111561219057fe5b83810291506121a084830161263d565b8181528481019084860184860187018a10156121ba578788fd5b8795505b838610156121dc5780358352600195909501949186019186016121be565b5098975050505050505050565b6000602082840312156121fa578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146113e8578182fd5b60006020828403121561223a578081fd5b815167ffffffffffffffff811115612250578182fd5b8201601f81018413612260578182fd5b805161226e611f4782612661565b818152856020838501011115612282578384fd5b611bcd826020830160208601612683565b6000602082840312156122a4578081fd5b5035919050565b600080604083850312156122bd578182fd5b82359150611fbd60208401611f12565b600081518084526122e5816020860160208601612683565b601f01601f19169290920160200192915050565b7f4c6f6f74466f7245766572796f6e650000000000000000000000000000000000815260609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600f82015260230190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156123f957603f19898403018552815160608151855288820151818a8701526123d9828701826122cd565b9289015115159589019590955250948701949250908601906001016123ab565b509098975050505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156123f957888303603f19018552815180518452870151878401879052612457878501826122cd565b958801959350509086019060010161242b565b901515815260200190565b6000602082526113e860208301846122cd565b60208082526018908201527f544f4f5f4d414e595f544f4b454e5f5245515545535445440000000000000000604082015260600190565b6020808252601190820152702727a722ac24a9aa22a72a2faa27a5a2a760791b604082015260600190565b6020808252600d908201527f494e56414c49445f52414e474500000000000000000000000000000000000000604082015260600190565b60208082526012908201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604082015260600190565b6020808252600b908201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f414c52454144595f43414c494d45440000000000000000000000000000000000604082015260600190565b60208082526009908201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f414c52454144595f434c41494d45440000000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561265957fe5b604052919050565b600067ffffffffffffffff82111561267557fe5b50601f01601f191660200190565b60005b8381101561269e578181015183820152602001612686565b83811115610655575050600091015256fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647345434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a2646970667358221220f4f516b8ef665b689aff44b5f675a26c43bf16eb739da58044d0d668dc8c652964736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "balance": "The number of tokens owned by the address."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface."
        },
        "returns": {
          "_0": "Whether the interface is supported."
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Throws if `index` >= `totalSupply()`.",
        "params": {
          "index": "A counter less than `totalSupply()`"
        },
        "returns": {
          "_0": "The token identifier for the `_index`th NFT,  (sort order not specified)"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Throws if `index` >= `balanceOf(owner)` or if  `owner` is the zero address, representing invalid NFTs.",
        "params": {
          "index": "A counter less than `balanceOf(owner)`",
          "owner": "An address where we are interested in NFTs owned by them"
        },
        "returns": {
          "_0": "The token identifier for the `index`th NFT assigned to `owner`,   (sort order not specified)"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getTokenDataForIds(uint256[])": {
        "notice": "get all info in the minimum calls"
      },
      "getTokenDataOfOwner(address,uint256,uint256)": {
        "notice": "get all info in the minimum calls"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isLootPicked(uint256)": {
        "notice": "return true if the loot has been picked up or been transfered at least once"
      },
      "name()": {
        "notice": "A descriptive name for a collection of NFTs in this contract"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "pickLoot(address,bytes)": {
        "notice": "utility function to claim a token when you know the private key of an address, go hunt for your loot!"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface. 0x01ffc9a7 is ERC165. 0x80ac58cd is ERC721 0x5b5e139f is for ERC721 metadata 0x780e9d63 is for ERC721 enumerable"
      },
      "symbol()": {
        "notice": "An abbreviated name for NFTs in this contract"
      },
      "tokenByIndex(uint256)": {
        "notice": "Enumerate valid NFTs"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Enumerate NFTs assigned to an owner"
      },
      "totalSupply()": {
        "notice": "Count NFTs tracked by this contract"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      },
      "transmute(uint256,address)": {
        "notice": "lock your original but limited loot so that you get a LootForEveryone like everyone else"
      },
      "transmuteBack(uint256,address)": {
        "notice": "unlock your original loot back"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1109,
        "contract": "src/LootForEveryone.sol:LootForEveryone",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1113,
        "contract": "src/LootForEveryone.sol:LootForEveryone",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)981_storage)"
      },
      {
        "astId": 1119,
        "contract": "src/LootForEveryone.sol:LootForEveryone",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1123,
        "contract": "src/LootForEveryone.sol:LootForEveryone",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)981_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)981_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)595_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 590,
            "contract": "src/LootForEveryone.sol:LootForEveryone",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 594,
            "contract": "src/LootForEveryone.sol:LootForEveryone",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)981_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 980,
            "contract": "src/LootForEveryone.sol:LootForEveryone",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)595_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}